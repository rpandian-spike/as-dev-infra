#
# Aerospike Client Dockerfile
#
#

FROM debian:11

RUN apt update
RUN apt -y install software-properties-common
RUN add-apt-repository -y ppa:deadsnakes/ppa
RUN apt -y install build-essential
RUN apt -y install openssh-server openssl-devel libssl-dev
RUN apt -y install libarchive-dev cmake rsync curl libcurl4-openssl-dev zip
RUN apt -y install python3 python3-dev python3-pip
RUN curl https://bootstrap.pypa.io/get-pip.py
# RUN apt -y install initscripts net-tools psmisc passwd
# RUN apt -y install wget openldap-devel
# RUN apt -y --enablerepo=powertools install lua-devel
# RUN apt -y install tcl tk tcl-devel tk-devel
# RUN apt -y install libffi libffi-devel gdbm-devel tk-devel
# RUN apt -y install xz-devel sqlite-devel readline-devel bzip2-devel ncurses-devel zlib-devel
# RUN apt -y install gcc-toolset-9-binutils
# RUN apt -y install libuv-devel
 
#  RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
#  RUN source ~/.bashrc
#  RUN nvm install 14.18.1 && nvm use 14.18.1
#  RUN npm install -g node-gyp
# cd ../../nodejs-expressions/
# DOWNLOAD=1 npm install
# node ~/.nvm/versions/node/v14.18.1/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js rebuild

# for gdb build/install 
# ../configure --prefix=/usr --with-system-readline --with-python=/usr/bin/python3 && 
# make -j12 && make -C gdb/doc doxy && make -C gdb install
# install -d /usr/share/doc/gdb-10.2 && rm -rf gdb/doc/doxy/xml && cp -Rv gdb/doc/doxy /usr/share/doc/gdb-10.2
# RUN \
#  apt config-manager --set-enabled powertools \
#  && apt -y install texi2html texinfo doxygen
# install the built debugger

# VOLUME [/Users/ramarajpandian/code/src/:/code/src]
# RUN \
# cd /code/src/cpython-39/build
# ./configure  --with-valgrind
# make install
# cd ../../gdb-10.2/build/
# make -C gdb install
# install -d /usr/share/doc/gdb-10.2
# rm -rf gdb/doc/doxy/xml
# cp -Rv gdb/doc/doxy /usr/share/doc/gdb-10.2

COPY ./requirements.txt /requirements.txt
RUN python3 -m pip install -r /requirements.txt

#RUN wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64
#RUN chmod +x /usr/local/bin/dumb-init

RUN echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config && \
    echo 'PermitEmptyPasswords yes' >> /etc/ssh/sshd_config && \
    echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config && \
    ssh-keygen -A

EXPOSE 23 
# run the below command in container and connect to it using vscode
# python3 -m debugpy --listen 0.0.0.0:4001 --wait-for-client ./examples/client/get_async.py
EXPOSE 4002
EXPOSE 9230
COPY ./asadm-setup /asadmn-setup
COPY ./as-client_entrypoint.sh /as-client_entrypoint.sh
RUN ["chmod", "+x", "/as-client_entrypoint.sh"]

# VOLUME [/Users/ramarajpandian/code/src/:/code/src]

ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc /tini.asc
# RUN gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \
#  && gpg --batch --verify /tini.asc /tini
RUN chmod +x /tini

ENTRYPOINT ["/tini", "--", "/as-client_entrypoint.sh"]
CMD [""]

#How to
#docker container rm as-client1
#docker build . -t as-client-debian11-dev:v1
#docker run -it --network=as-bridge -v /Users/ramarajpandian/code/src:/code/src as-client-ubuntu18-dev:v1 /bin/bash
