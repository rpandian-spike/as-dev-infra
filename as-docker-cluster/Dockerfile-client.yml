#
# Aerospike Client Dockerfile
#
#

FROM centos:8

RUN sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-* && \
    sed -i 's|#baseurl=http://mirror.centos.org|baseurl=https://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-* && \
    dnf install centos-release-stream -y && \
    dnf swap centos-{linux,stream}-repos -y && \
    dnf distro-sync -y

RUN dnf -y update
RUN dnf -y group install "Development Tools"
RUN dnf -y install openssl openssh-server openssl-devel
RUN dnf -y install libarchive cmake rsync libcurl-devel zip
RUN dnf -y install initscripts net-tools psmisc passwd
RUN dnf -y install openldap-devel
RUN dnf -y --enablerepo=powertools install lua-devel
RUN dnf -y install tcl tk tcl-devel tk-devel
RUN dnf -y install libffi libffi-devel gdbm-devel tk-devel
RUN dnf -y install xz-devel sqlite-devel readline-devel bzip2-devel ncurses-devel zlib-devel
RUN dnf -y install gcc-toolset-9-binutils
RUN dnf -y install https://extras.getpagespeed.com/release-el8-latest.rpm libevent-devel

# RUN wget http://dist.libuv.org/dist/v1.8.0/libuv-v1.8.0.tar.gz && \
#     tar xf libuv-v1.8.0.tar.gz && \
#     cd libuv-v1.8.0 && \
#     sh autogen.sh && \
#     ./configure -q && \
#     make V=1 VERBOSE=1 CFLAGS="-w -fPIC" && \
#     make V=1 VERBOSE=1 install

# ENV LD_LIBRARY_PATH /usr/local/lib
# RUN ldconfig

RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash && \
    source ~/.bashrc && \
    nvm install 16.14.0 && \
    nvm install 14.19.0 && \
    nvm install 12.22.10 && \
    nvm install 10.20.0 && \
    nvm use 16.14.0 && \
    npm install -g node-gyp && \
    npm install -g --force nodemon

# for gdb build/install 
# ../configure --prefix=/usr --with-system-readline --with-python=/usr/bin/python3 && 
# make -j12 && make -C gdb/doc doxy && make -C gdb install
# install -d /usr/share/doc/gdb-10.2 && rm -rf gdb/doc/doxy/xml && cp -Rv gdb/doc/doxy /usr/share/doc/gdb-10.2
RUN dnf config-manager --set-enabled powertools
RUN dnf -y install texi2html texinfo doxygen
# install the built debugger

# VOLUME [/Users/ramarajpandian/code/src/:/code/src]
# RUN \
# cd /code/src/cpython-39/build
# ./configure  --with-valgrind
# make install
# cd ../../gdb-10.2/build/
# make -C gdb install
# install -d /usr/share/doc/gdb-10.2
# rm -rf gdb/doc/doxy/xml
# cp -Rv gdb/doc/doxy /usr/share/doc/gdb-10.2

# RUN dnf -y install python38 python38-devel  python38-debug
RUN dnf -y install wget
RUN wget https://www.python.org/ftp/python/3.10.4/Python-3.10.4.tgz && \
    tar xzf Python-3.10.4.tgz && \
    cd Python-3.10.4 && \
    ./configure --with-pydebug --with-pymalloc="no" --with-valgrind --with-system-ffi --with-computed-gotos --enable-loadable-sqlite-extensions && \
    make -j 6 && \ 
    make install && \
    rm -f Python-3.10.4.tgz 

COPY ./requirements.txt /requirements.txt
RUN python3.10 -m pip install -r /requirements.txt

#RUN wget -O /usr/local/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v1.2.5/dumb-init_1.2.5_x86_64
#RUN chmod +x /usr/local/bin/dumb-init

RUN echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config && \
    echo 'PermitEmptyPasswords yes' >> /etc/ssh/sshd_config && \
    echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config && \
    ssh-keygen -A

EXPOSE 22 
# run the below command in container and connect to it using vscode
# python3 -m debugpy --listen 0.0.0.0:4001 --wait-for-client ./examples/client/get_async.py
EXPOSE 4001
EXPOSE 9229
COPY ./asadm-setup /asadmn-setup
COPY ./as-client_entrypoint.sh /as-client_entrypoint.sh
RUN ["chmod", "+x", "/as-client_entrypoint.sh"]

# VOLUME [/Users/ramarajpandian/code/src/:/code/src]

ENV TINI_VERSION v0.19.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini.asc /tini.asc
# RUN gpg --batch --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 595E85A6B1B4779EA4DAAEC70B588DFF0527A9B7 \
#  && gpg --batch --verify /tini.asc /tini
RUN chmod +x /tini

ENTRYPOINT ["/tini", "--", "/as-client_entrypoint.sh"]
CMD [""]

#How to
#docker container rm as-client1
#docker image build -f Dockerfile-client.yml -t as-client-centos8-dev:v1 .
#docker run -it --network=as-bridge -v /Users/ramarajpandian/code/src:/code/src as-client-centos8-dev:v1 /bin/bash
#ssh root@127.0.0.1 -p 2225